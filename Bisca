package main.bisca;

import java.util.List;
import java.util.ArrayList;


class Resultado {

    Carta cartaGanhador;
    int indexGanhador;
    List<Carta> jogadas;

    
    Resultado(Carta cartaGanhador, int indexGanhador, List<Carta> jogadas) {
        this.cartaGanhador = cartaGanhador;
        this.indexGanhador = indexGanhador;
        this.jogadas = jogadas;
    }

}

public class Bisca {

    
    public List<Player> players;
    public Baralho baralho;
    public List<Player> time1;
    public List<Player> time2;
    public Boolean reli;
    
    
    public Bisca(String p1, String p2) {
        this.reli = false;
        this.baralho = new Baralho();
        
        this.players = new ArrayList<Player>() {
        };
        this.players.add(new Player(p1));
        this.players.add(new Player(p2));

        this.time1 = new ArrayList<Player>() {
        };
        this.time1.add(this.players.get(0));

        this.time2 = new ArrayList<Player>() {
        };
        this.time2.add(this.players.get(1));
    }

   
    public Bisca(String p1, String p2, String p3, String p4) {
        this.reli = false;
        this.baralho = new Baralho();
        
        this.players = new ArrayList<Player>() {
        };
        this.players.add(new Player(p1));
        this.players.add(new Player(p2));
        this.players.add(new Player(p3));
        this.players.add(new Player(p4));

        this.time1 = new ArrayList<Player>() {
        };
        this.time1.add(this.players.get(0));
        this.time1.add(this.players.get(2));

        this.time2 = new ArrayList<Player>() {
        };
        this.time2.add(this.players.get(1));
        this.time1.add(this.players.get(3));
    }

    
     void darCartas() {
        int tam = this.players.size();

        for (int i = 0; i < tam; i++) {
            Carta cartaPuxada = this.baralho.pegarCarta();
            this.players.get(i).receberCarta(cartaPuxada);
        }
    }

   
    void reordenarPlayers(int indexInicial) {
        List<Player> novaOrdemPlayers = new ArrayList<Player>() {
        };

        for (int i = indexInicial; i < this.players.size() + indexInicial; i++) {
            int pegarPos = i % this.players.size();
            Player pegarPlayer = this.players.get(pegarPos);
            novaOrdemPlayers.add(pegarPlayer);
        }

        this.players = novaOrdemPlayers;
    }

    
    Resultado jogarCartas(Carta trunfo) {
        Carta cartaGanhador = null;
        int indexGanhador = -1;

        List<Carta> jogadas = new ArrayList<Carta>() {
        };

        int tam = this.players.size();
        for (int i = 0; i < tam; i++) {
            Player player = this.players.get(i);
            Carta jogada = player.usarCarta();

            
            Boolean regra1 = (player.mao.size() > 1 && !(this.reli) && jogada.carta == "A"
                    && jogada.naipe == trunfo.naipe);
            
           
            Boolean regra2 = (!(this.reli) && jogada.carta == "7" && jogada.naipe == trunfo.naipe);
                    
            
            if (regra1) {
                Carta devolver = jogada;
                jogada = player.usarCarta();
                player.receberCarta(devolver);
            }
            
            
            if (regra2) {
                this.reli = true;
            }
            
            jogadas.add(jogada);
            
            Boolean regra3 = cartaGanhador == null; // é a primeira carta jogada?
            Boolean regra4 = false; // são do mesmo naipe e a jogada é de ordem maior?
            Boolean regra5 = false; // são de naipes diferentes e a jogada é do naipe do trunfo?
            
            if (!regra3) {
                regra4 = (cartaGanhador.naipe.equals(jogada.naipe) && cartaGanhador.ordem < jogada.ordem);
                regra5 = (!(cartaGanhador.naipe.equals(jogada.naipe)) && jogada.naipe.equals(trunfo.naipe));
            }
            
            if (regra3 || regra4 || regra5) {
                cartaGanhador = jogada;
                indexGanhador = i;
            }
        }

        return new Resultado(cartaGanhador, indexGanhador, jogadas);
    }
    
    
    void printJogadas(int indexGanhador, List<Carta> jogadas) {
        int tam = this.players.size();
        
        for (int i = 0; i < tam; i++) {
            Boolean regraVencedor = i == indexGanhador;
            Player player = this.players.get(i);
            String cartaPlayer = (i + 1) + " - " + player.nome + ": " + jogadas.get(i).printCarta();
           
            String vencedorPlayer = regraVencedor ? " (vencedor)" : "";

            System.out.println(cartaPlayer + vencedorPlayer);
        }
    }

   
    int pontosRodada(List<Carta> jogadas) {
        int tam = jogadas.size();
        int soma = 0;
        for (int i = 0; i < tam; i++) {
            soma += jogadas.get(i).valor;
        }
        return soma;
    }

   
    void iniciar() {
        for (int i = 0; i < 3; i++) {
            this.darCartas();
        }
    }


    void rodada(int rod) {
        Carta trunfo = this.baralho.trunfo;

        System.out.println("\nRodada " + rod + " (trunfo: " + trunfo.printCarta() + "):");

        Resultado resultados = this.jogarCartas(trunfo);

        this.printJogadas(resultados.indexGanhador, resultados.jogadas);

        int pontosRodada = this.pontosRodada(resultados.jogadas);

        this.players.get(resultados.indexGanhador).adicionarPontos(pontosRodada);

        this.reordenarPlayers(resultados.indexGanhador);
    }

    int somarTime(List<Player> time) {
        int tam = time.size();
        int soma =0;
        for(int i=0; i<tam; i++){
            soma += time.get(i).pontos;
        }
        return soma;
    }

    void finalizar() {

        int pontosTime1 = somarTime(this.time1);
        int pontosTime2 = somarTime(this.time2);
        
        if(pontosTime1 == pontosTime2){
            System.out.println("\n\nEmpate! " + pontosTime1 + " x " + pontosTime2);
            return;
        }
        
        List<Player> ganhadores = pontosTime1 > pontosTime2 ? this.time1 : this.time2;
        
        List<String> nomesGanhadoresArray = new ArrayList<String>(){
        };
        int tam = ganhadores.size();
        
        for(int i=0; i<tam ;i++){
            nomesGanhadoresArray.add(ganhadores.get(i).nome);
        }
        
        String nomesGanhadores = String.join(" e ", nomesGanhadoresArray);
        
        System.out.println("\n\nVitoria de " + nomesGanhadores + "! " + pontosTime1 + " x " + pontosTime2);
    }

    void jogar(){
        this.iniciar();
        
        int rodadas =0 ;
        while(this.baralho.cartasRestantes()>0){
            rodadas++;
            
            this.rodada(rodadas);
            this.darCartas();
        }
        
        for(int i=0; i<3; i++){
            rodadas++;
            
            this.rodada(rodadas);
        }
        
        this.finalizar();
    }
    
}
